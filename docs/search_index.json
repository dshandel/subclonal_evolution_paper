[["index.html", "Pre-existing Radioresistant Subclones Determine Radioresistance in Rectal Cancer Organoids 1 In vitro radiation response and clinical data 1.1 Progression-free survival 1.2 In vitro dose-response", " Pre-existing Radioresistant Subclones Determine Radioresistance in Rectal Cancer Organoids Daan Andel 2023-07-18 1 In vitro radiation response and clinical data 1.1 Progression-free survival # Libraries and sources library(readxl) library(tidyverse) library(ggplot2) library(ggfortify) library(survival) library(survminer) library(survMisc) library(cowplot) ######## # Data # ######## # Loading survival data from time of surgery surg_surv &lt;- as.data.frame(read_excel(&quot;../cna_analysis/data/clinical_and_dr/data_survival_progression.xlsx&quot;, sheet = &quot;surg_surv&quot;)) # Loading progression data from time of surgery surg_prog &lt;- as.data.frame(read_excel(&quot;../cna_analysis/data/clinical_and_dr/data_survival_progression.xlsx&quot;, sheet = &quot;surg_prog&quot;)) ####### # Run # ####### ## Survival from time of surgery ## surg_surv_sum &lt;- Surv(time = surg_surv$time, event = surg_surv$status == 2) # Fit without strata (~1) surg_surv_fit &lt;- survfit(surg_surv_sum ~ 1) # Median survival from time of surgery surv_median(surg_surv_fit)[1,2] ## [1] 1857 ## Progression from time of surgery ## surg_prog_sum &lt;- Surv(time = surg_prog$time, event = surg_prog$status == 2) # Fit without strata (~1) surg_prog_fit &lt;- survfit(surg_prog_sum ~ 1) # Median progression from time of surgery surv_median(surg_prog_fit)[1,2] ## [1] NA ######## # Plot # ######## # Constructing a dataframe for annotating labels anno_df_prog &lt;- data.frame(label = surg_prog$organoid, time = surg_prog$time) # make temp df with survival/prob data temp_df_prob_prog &lt;- data.frame(time = surg_prog_fit$time, prob = surg_prog_fit$surv ) # join together anno_df_prog &lt;- left_join(anno_df_prog, temp_df_prob_prog) # sort by time anno_df_prog &lt;- anno_df_prog[order(anno_df_prog$time),] # Plotting progression free survival prog_p &lt;- ggsurvplot(surg_prog_fit, data = surg_prog, conf.int = F, palette = c(&quot;#00887d&quot;), ggtheme = theme_cowplot(), legend = &#39;none&#39;, censor.size = 8, xlim = c(0,2200), ylab = &#39;Progression-free survival probability&#39;, xlab = &#39;Time from surgery (days)&#39;) # adding labels prog_p$plot &lt;- prog_p$plot + annotate(&quot;text&quot;, x = anno_df_prog$time + c(350, 350, 350, -150,50,250,0,0), y = anno_df_prog$prob + c(0.1,0.1,0.1, -0.05, 0.05, -0.05, 0.05,-0.05), label = anno_df_prog$label) + theme(aspect.ratio = 5/3) + coord_cartesian(clip = &#39;off&#39;) prog_p 1.2 In vitro dose-response 1.2.1 Representative plot # Libraries and sources library(tidyverse) # for wrangling data library(readxl) # for reading excel files library(DescTools) # for computing AUCs with AUC() function) library(drc) # for fitting dose response library(cowplot) library(wesanderson) source(&#39;R/auc_rad.R&#39;) source(&#39;R/fitter_rad.R&#39;) source(&#39;R/ic50_rad.R&#39;) source(&#39;R/relativize_dr.R&#39;) ################ # Loading data # ################ d &lt;- data.frame(read_excel(&#39;../cna_analysis/data/clinical_and_dr/resistancy_organoids.xlsx&#39;)) # remove fluke experiment (can&#39;t be fitted by the drc package in metricsandfits.R) d &lt;- subset(d, expcode != &#39;cva0028&#39;) # remove dose 1, 10,12 d &lt;- subset(d, dose %in% c(0,2,4,6,8)) # only include organoids that were not radiated d &lt;- subset(d, rec_rad == 0) ############## # Relativize # ############## # Relativizing the data # split per experiment per_exp &lt;- split(d, f = d$expcode, drop = TRUE) # apply relative function to every instance in per_exp rel_vector_unrad &lt;- lapply(per_exp, relative, rad = F) # join the dataframes togheter d_nonrad = do.call(rbind, rel_vector_unrad) #remove rownames rownames(d_nonrad) &lt;- NULL # pool d_rad and d_nonrad, if not possible, make d d_nonrad # try to bind d_rad and d_nonrad. If d_rad is empty (this is the case when # rec_rad does not have ones, make d the same as d_nonrad) d &lt;- d_nonrad ################ # Loading data # ################ load(&quot;../cna_analysis/rda/clinical_and_dr/wrangled-data.rda&quot;) # load the wrangled data, data is saved under &#39;d&#39; # defining experiment number for reference exp_numb &lt;- unique(d$expcode) exp_numb &lt;- paste(unlist(exp_numb), collapse=&#39;&#39;) ################## ### Metric AUC ### ################## # split per experiment per_exp &lt;- split(d, f = d$expcode, drop = TRUE) # apply relative function to every instance in per_exp AUC_vector &lt;- lapply(per_exp, AUC_fun) # join the dataframes togheter AUC = do.call(rbind, AUC_vector) # remove rownames rownames(AUC) &lt;- NULL ####### # Fit # ####### # apply fit function to every instance in per_exp fit_vector &lt;- lapply(per_exp, fitter) # join the dataframes toghether fit = do.call(rbind, fit_vector) # remove rownames rownames(fit) &lt;- NULL fit$rec_rad = 0 # remove rownames rownames(fit) &lt;- NULL ################## # relative IC50s # ################## ## relative under curve for unrad # apply relative function to every instance in per_exp IC50_vector &lt;- lapply(per_exp, IC50_fun, rad = 0) # join the dataframes togheter IC50= do.call(rbind, IC50_vector) metrics = cbind(AUC, IC50) metrics$rec_rad &lt;- 0 # compute mean of rel_AUC metrics_pooled &lt;- metrics %&gt;% group_by(cline) %&gt;% summarise_at(vars(rel_AUC), funs(mean(., na.rm=TRUE))) metrics_pooled$expcode &lt;- exp_numb # compute mean of rel_AUC metrics_pooled &lt;- metrics %&gt;% group_by(cline) %&gt;% summarise_at(vars(rel_AUC), funs(mean(., na.rm=TRUE))) # summary statistics median(metrics$rel_AUC) ## [1] 0.5758785 min(metrics$rel_AUC) ## [1] 0.304031 max(metrics$rel_AUC) ## [1] 0.8152938 ######## # Data # ######## load(&quot;../cna_analysis/rda/clinical_and_dr/wrangled-data.rda&quot;) # load the wrangled data, data is saved under &#39;d&#39; load(&quot;../cna_analysis/rda/clinical_and_dr/fitted-data.rda&quot;) # load the wrangled data, data is saved under &#39;fit&#39; load(&#39;../cna_analysis/rda/clinical_and_dr/metrics_data.rda&#39;) # load the metrics data ########### # Wrangle # ########### ### define two dataframes, one from rad one without rad: fit &lt;- subset(fit, rec_rad == 0) exp_numb &lt;- unique(d$expcode) exp_numb &lt;- paste(unlist(exp_numb), collapse=&#39;&#39;) # new data with doses. Note: lowest dose is not # log 0 but log(&#39;very small number&#39;) because otherwise this will hamper the scaling in ggplot later on. d$dose0 &lt;- d$dose d$dose0[d$dose0 == 0] &lt;- 0.00000001 # representative expcodes # makeing helper column to extract representative expcodes d$cline_expcode &lt;- paste0(d$cline, &#39;_&#39;, d$expcode) fit$cline_expcode &lt;- paste0(fit$cline, &#39;_&#39;, fit$expcode) # subsetting cline_expcode_pick &lt;- c( &#39;HUB005_cva0025&#39;, &#39;HUB183_cva0025&#39;, &#39;HUB015_cva0023&#39;, &#39;HUB175_cva0024&#39;, &#39;HUB181I_cva0021&#39;, &#39;HUB197_cva0030&#39;, &#39;HUB106_cva0020&#39;, &#39;HUB062_cva0023&#39;, &#39;HUB112_cva0112&#39;) d &lt;- subset(d, cline_expcode %in% cline_expcode_pick) fit &lt;- subset(fit, cline_expcode %in% cline_expcode_pick) # add resistantcy group for colour coding resistant &lt;- c(&#39;HUB005&#39;, &#39;HUB183&#39;, &#39;HUB015&#39;) sensitive &lt;- c(&#39;HUB197&#39;, &#39;HUB106&#39;, &#39;HUB062&#39;) d$resistancy_group &lt;- ifelse( d$cline %in% resistant, &#39;Resistant&#39;, ifelse(d$cline %in% sensitive, &#39;Sensitive&#39;, &#39;Intermediate&#39;) ) fit$resistancy_group &lt;- ifelse( fit$cline %in% resistant, &#39;Resistant&#39;, ifelse(fit$cline %in% sensitive, &#39;Sensitive&#39;, &#39;Intermediate&#39;) ) # Make cline a factor and specify order by decreasing AUC mean d$cline &lt;- factor(d$cline, levels = c(&#39;HUB005&#39;, &#39;HUB183&#39;, &#39;HUB015&#39;, &#39;HUB112&#39;, &#39;HUB175&#39;, &#39;HUB181I&#39;, &#39;HUB106&#39;, &#39;HUB197&#39;, &#39;HUB062&#39;)) d$resistancy_group &lt;- factor(d$resistancy_group, levels = c(&#39;Resistant&#39;, &#39;Intermediate&#39;, &#39;Sensitive&#39;)) ggplot(NULL, aes(x = dose0, y = relative_mean, group = cline, col = resistancy_group)) + geom_point(data= d, size =3, aes(shape = cline)) + geom_errorbar(data = d, aes(ymin=relative_mean-relative_sem,ymax=relative_mean+relative_sem), width=0.1) + geom_line(data = d) + # geom_line(data=fit, aes(x=dose, y=pred), # size = 1) + # adding log x-axis coord_trans(#x=&quot;log10&quot;, xlim = c(0.00000001, 8), ylim = c(0, 1.1)) + scale_x_continuous(breaks = c(0, 2,4,6,8)) + scale_y_continuous(expand = c(0,0)) + theme_cowplot() + ylab(&#39;Normalized viability&#39;) + xlab(&#39;Dose (Gy)&#39;) + theme( legend.title = element_blank(), aspect.ratio = 5 / 3) + scale_shape_manual(values=seq(0,8)) + scale_colour_manual( values = c( Resistant = &#39;#DE3163&#39;, Sensitive = &#39;#5090CD&#39;, Intermediate = &#39;grey75&#39; ), guide = guide_legend(override.aes = list( linetype = c(rep(&quot;blank&quot;, length( unique(d$resistancy_group) ))), shape = c(rep(19, length( unique(d$resistancy_group) ))) )) ) 1.2.2 rAUC across multiple experiments ######## # Data # ######## load(&#39;../cna_analysis/rda/clinical_and_dr/metrics_data.rda&#39;) # load the wrangled data, data is saved under &#39;metrics&#39; exp_numb &lt;- unique(metrics$expcode) exp_numb &lt;- paste(unlist(exp_numb), collapse = &#39;&#39;) ########### # Wrangle # ########### # Make cline a factor and specify order by decreasing AUC mean metrics$cline &lt;- factor( metrics$cline, levels = metrics %&gt;% group_by(cline) %&gt;% summarize(mean_auc = mean(rel_AUC)) %&gt;% arrange(-mean_auc) %&gt;% pull(cline) ) # add resistantcy group for colour coding resistant &lt;- c(&#39;HUB005&#39;, &#39;HUB183&#39;, &#39;HUB015&#39;) sensitive &lt;- c(&#39;HUB197&#39;, &#39;HUB106&#39;, &#39;HUB062&#39;) metrics$resistancy_group &lt;- ifelse( metrics$cline %in% resistant, &#39;Resistant&#39;, ifelse(metrics$cline %in% sensitive, &#39;Sensitive&#39;, &#39;Intermediate&#39;) ) # changing order of resistancy_group metrics$resistancy_group &lt;- factor(metrics$resistancy_group, levels = c(&quot;Resistant&quot;, &quot;Intermediate&quot;, &quot;Sensitive&quot;)) ######## # Plot # ######## ggplot(metrics, aes(x = cline, y = rel_AUC, group = cline)) + geom_boxplot(aes(fill = resistancy_group)) + geom_jitter(height = 0, width = 0.1, size = 2) + theme_cowplot() + scale_fill_manual( values = c( Resistant = &#39;#DE3163&#39;, Sensitive = &#39;#5090CD&#39;, Intermediate = &#39;grey75&#39; ), guide = guide_legend(override.aes = list( linetype = c(rep(&quot;blank&quot;, length( unique(metrics$resistancy_group) ))), shape = c(rep(19, length( unique(metrics$resistancy_group) ))) )) ) + xlab(&#39;&#39;) + ylab(&#39;Relative AUC&#39;) + theme( legend.title = element_blank(), aspect.ratio = 5 / 3, axis.text.x = element_text(angle = 45, hjust = 1) ) + coord_cartesian(clip = &#39;off&#39;) + scale_y_continuous(limits = c(0,1)) 1.2.3 Flow cytometry-based measurement of (apoptotic) cells with sub-G1 DNA content ########### # Wrangle # ########### d &lt;- data.frame(read_excel(&quot;../cna_analysis/data/clinical_and_dr/nicoletti_data.xlsx&quot;)) # defining experiment number for referenc exp_numb &lt;- unique(d$expcode) exp_numb &lt;- paste(unlist(exp_numb), collapse = &#39;&#39;) # defining apoptosis percentage d$apop_perc &lt;- d$subg1 / d$singlets * 100 d_zero &lt;- d %&gt;% group_by(cline, expcode) %&gt;% arrange(cline, expcode) %&gt;% filter(dose == 0) d_five &lt;- d %&gt;% group_by(cline, expcode) %&gt;% arrange(cline, expcode) %&gt;% filter(dose == 5) df_fc_apop &lt;- data.frame( cline = d_zero$cline, expcode = d_zero$expcode, fc_apop = d_five$apop_perc / d_zero$apop_perc ) %&gt;% group_by(cline) %&gt;% summarize(mean_apop_fc = mean(fc_apop), sd_apop_fc = sd(fc_apop)) df_fc_apop$cline &lt;- factor(df_fc_apop$cline, levels = c(&#39;HUB005&#39;, &#39;HUB183&#39;, &#39;HUB062&#39;, &#39;HUB106&#39;)) df_fc_apop ## # A tibble: 4 × 3 ## cline mean_apop_fc sd_apop_fc ## &lt;fct&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 HUB005 1.31 0.538 ## 2 HUB062 5.88 0.903 ## 3 HUB106 11.8 0.714 ## 4 HUB183 2.93 0.0548 ######## # Plot # ######## ggplot(df_fc_apop, aes(x= cline, y = mean_apop_fc, fill = cline)) + geom_bar(aes(group = cline), stat = &#39;identity&#39;, position=position_dodge(), col = &#39;black&#39;) + geom_linerange(aes(ymin=mean_apop_fc, ymax=mean_apop_fc + sd_apop_fc), position=position_dodge(0.65), size = 1, alpha = 0.8) + theme_cowplot() + scale_fill_manual( values = c(HUB181I = &quot;#8491B4FF&quot;, HUB005 = &quot;#E64B35FF&quot;, HUB062 = &quot;#91D1C2FF&quot;, HUB015 = &#39;#FADA5E&#39;, HUB106 = &quot;#3C5488FF&quot;, HUB183 = &quot;#F39B7FFF&quot;, HUB175 = &quot;#00A087FF&quot;, HUB197 = &#39;grey&#39;)) + scale_y_continuous(expand = c(0,0,0.01,0)) + theme_cowplot() + ylab(&#39;Fold change (% apoptotic cells)&#39;) + xlab(&#39;&#39;) + guides(fill=&quot;none&quot;) + theme( aspect.ratio = 5 / 3, axis.text.x = element_text(angle = 45, hjust=1)) 1.2.4 Recovery statistics after 10 Gy radiation ######## # Data # ######## df &lt;- as.data.frame(read_excel(&quot;../cna_analysis/data/clinical_and_dr/ 10gy_recovery_data.xlsx&quot;)) ########### # Wrangle # ########### df_res &lt;- subset(df, resistancy_group == &#39;Resistant&#39;) df_sens &lt;- subset(df, resistancy_group == &#39;Sensitive&#39;) ############## # Statistics # ############## # Resistant mean_days_res &lt;- mean(as.numeric(df_res$days_to_full_recovery), na.rm = T) mean_days_res ## [1] 30.66667 sd_days_res &lt;- sd(as.numeric(df_res$days_to_full_recovery), na.rm = T) sd_days_res ## [1] 11.54701 # Sensitve mean_days_sens &lt;- mean(as.numeric(df_sens$days_to_full_recovery), na.rm = T) mean_days_sens ## [1] 49 sd_days_sens &lt;- sd(as.numeric(df_sens$days_to_full_recovery), na.rm = T) sd_days_sens ## [1] 23.64318 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
