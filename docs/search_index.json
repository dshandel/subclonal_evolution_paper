[["subclonal-dynamics.html", "2 Subclonal dynamics 2.1 AneuFinder Run 2.2 Quality selection 2.3 Summary statistics of copy number alterations 2.4 PCA and K-means plots", " 2 Subclonal dynamics # Libraries and sources library(tidyverse) library(AneuFinder) library(GenomeInfoDb) library(BSgenome.Hsapiens.UCSC.hg38) library(stringr) source(&#39;R/plot_pca_kmeans.R&#39;) source(&#39;R/quality_functions.R&#39;) source(&#39;R/quality_functions.R&#39;) 2.1 AneuFinder Run ########### # Folders # ########### # define bamdirectory bamDirectory &lt;- &quot;../cna_analysis/data/subclonal_dynamics/single_cell_bams&quot; # generates novel directories from bam-file directory to store analysis files inputdirs &lt;- list.dirs(bamDirectory, recursive = F) outputdirs &lt;- list.dirs(bamDirectory, full.names = F, recursive = F) outputdirs &lt;- paste0(&quot;rda/subclonal_dynamics/standard_aneufinder_output_pairedend_5kb/&quot;, outputdirs) # define location for correction: mappability &lt;- &quot;data/subclonal_dynamics/correctionfiles/bothlymphsdiploidref.bed&quot; blacklist &lt;- &quot;data/subclonal_dynamics/correctionfiles/GRCh38_blacklist_bothlymphsdiploidref.bed&quot; # creating a results folder in the working directory names &#39;result&#39; dir.create(path = &#39;rda/subclonal_dynamics/standard_aneufinder_output_pairedend_5kb&#39;) # creating folders for each plate in the standard_aneufinder_output folder. for (i in 1:length(outputdirs)) { dir.create(path = outputdirs[i]) } ####### # Run # ####### # iterates through bam-file directories and analyses results for (i in 4:length(inputdirs)) { BamFolder &lt;- paste0(inputdirs[i], &#39;/split_cells&#39;) Aneufinder( # specifying input and outputfolder inputfolder = BamFolder, outputfolder = outputdirs[i], # general settings numCPU = 10, reuse.existing.files = TRUE, # specifying binning options binsizes = 5e+05, # 500000 stepsizes = 5e+05, variable.width.reference = mappability, reads.per.bin = NULL, pairedEndReads = T, assembly = &#39;hg38&#39;, chromosomes = c( &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;, &#39;10&#39;, &#39;11&#39;, &#39;12&#39;, &#39;13&#39;, &#39;14&#39;, &#39;15&#39;, &#39;16&#39;, &#39;17&#39;, &#39;18&#39;, &#39;19&#39;, &#39;20&#39;, &#39;21&#39;, &#39;22&#39;, &#39;X&#39; ), remove.duplicate.reads = F, min.mapq = 10, blacklist = blacklist, reads.store = T, use.bamsignals = F, # specifying correction options correction.method = &#39;GC&#39;, GC.BSgenome = BSgenome.Hsapiens.UCSC.hg38, #mappability.reference = NULL, #specofying model options method = c(&#39;edivisive&#39;), eps = 0.1, max.time = 60, max.iter = -1, num.trials = 15, states = c( &#39;zero-inflation&#39;, &#39;0-somy&#39;, &#39;1-somy&#39;, &#39;2-somy&#39;, &#39;3-somy&#39;, &#39;4-somy&#39;, &#39;5-somy&#39;, &#39;6-somy&#39;, &#39;7-somy&#39;, &#39;8-somy&#39;, &#39;9-somy&#39;, &#39;+10-somy&#39; ), #most.frequent.state = &#39;2-somy&#39;, # maybe this should be changed given some organoids seem triploid. #most.frequent.state.strandseq = &#39;1-somy&#39;, #specifying how to detect sister chromatid exchanges #resolution = c(3,6), #min.segwidth = 4, #bw = 4e+06, #pval = 0.05, # plotting options cluster.plots = T ) } 2.2 Quality selection ############### # Description # ############### # Single cell karyotyping is inherently noisy data. This script runs # some of the in-build quality checks provided by AneuFinder ######### # Paths # ######### # defining rdabasedirectory rdaBaseDirectory &lt;- &quot;../cna_analysis/rda/subclonal_dynamics/standard_aneufinder_output_pairedend_5kb&quot; # list all folders within base directory (each folder contains folders the AneuFinder output: MODELS, plots etc..) # the files we need are in the MODELS folder inputdirs &lt;- list.dirs(rdaBaseDirectory, recursive = F) # define the model we want to use (this can be &#39;dnacopy, edivisive, or HMM&#39;) model = &#39;edivisive&#39; modeldirs &lt;- list.dirs(rdaBaseDirectory, recursive = F) ####### # Run # ####### # run for edivisive cl_list_edivisive &lt;- list() for (i in 1:(length(inputdirs))) { # function cl_list_edivisive[[paste0(&#39;kra&#39;, str_extract(pattern = &#39;\\\\d{3}&#39;, inputdirs[i]))]] &lt;- quality_check(inputdir = inputdirs[i], model = &#39;edivisive&#39;) } ######## # Save # ######## save(cl_list_edivisive, file = &#39;../cna_analysis/rda/subclonal_dynamics/cl_list_edivisive_paired.rda&#39;) ######## # Data # ######## load(&#39;../cna_analysis/rda/subclonal_dynamics/cl_list_edivisive_paired.rda&#39;) ################# # Quality check # ################# qual_summary &lt;- lapply(cl_list_edivisive, check_quality) ####### # Run # ####### select_files_edivisive &lt;- lapply(cl_list_edivisive, quality_select, spik = 0.7, bhat = 0) ######## # Save # ######## save(select_files_edivisive, file = &#39;../cna_analysis/rda/subclonal_dynamics/select_files_edivisive.rda&#39;) ############### # Description # ############### # After AneuFinder&#39;s inbuild quaility selection, there are still some evident # noisy single cells, that appear on the heatmap as if having very high and # unstructured ploidy. These single cell&#39;s will be removed manually here. The cells # were selected by inspecting standard AneuFinder heatmaps on the post-quality # selected files (code not shown). ######## # Data # ######## # loading files after quality selection load(&#39;../cna_analysis/rda/subclonal_dynamics/select_files_edivisive.rda&#39;) ########## # Select # ########## # removing karyotypes that are clearly artefacts. The karyotypes are # selected based on the figures in figs -&gt; genomeheatmap_afterqc -&gt; edivisive kra003_remove &lt;- as.character(c( 272, 122 , 33 , 198 , 372, 116 , 105 , 104, 175 , 341 , 30, 12 , 280 , 215 , 31 , 139 , 295 , 370 , 337 , 307 , 170 ,80 , 357 , 34, 21 , 60 , 129 , 318 , 39 , 365, 113 , 89 , 4 , 57 , 162 , 20 , 135 , 235 , 377 , 181 , 46 , 84 , 186 , 81, 257 , 225 , 191 , 269)) kra004_remove &lt;- as.character(c(266, 251, 375, 256, 303, 179, 160, 290, 368, 28, 334, 211, 261, 58, 133, 115, 161, 20, 162, 112, 314, 181, 264, 268, 268, 30, 127, 98, 191, 383, 232, 104, 350, 163, 377, 323, 333, 224, 242, 184, 244, 277, 102, 21, 93, 149, 101, 332, 188, 225, 135)) kra005_remove &lt;- as.character(c(89, 159, 61, 155, 146, 141, 30, 174, 95, 262, 264, 48, 152, 103, 92, 116, 297, 333)) kra006_remove &lt;- as.character(c(380, 176, 328, 255, 4, 60, 264, 111, 173)) kra007_remove &lt;- as.character(c(37, 366, 213, 262, 83, 78, 10, 351)) ## diploid subclone91, 363, 275)) kra008_remove &lt;- as.character(c(70, 143, 77, 144, 146, 189, 35, 170, 30, 119, 65, 51, 107, 362, 58 ,125, 66 ,210 ,160 ,186, 102, 37, 226, 183, 59, 159, 46, 87, 118, 285, 69, 109)) # diploid subclone # 287, 302, 212, 15, # 115, 166, 126, 17, 95, 231, 19, 104, # 86, 138, 105, 116, 81 ,130, 88, 61)) kra009_remove &lt;- as.character(c(239, 347, 94, 65, 91, 163, 246, 6 ,116, 330, 126, 76, 54, 57, 107 ,181, 154, 137, 60, 114, 55, 81, 179, 241, 75, 142, 329, 323)) # diploid subclone kra009 74, 59, 375, 112, 92, 99, # 105 kra010_remove &lt;- as.character(c(363, 217, 242, 238, 27, 46, 189, 28, 216, 84, 234, 71, 95, 60, 86, 181, 172, 42, 355, 58, 43, 132, 262, 176, 143,311, 203, 297,307, 3, 227, 72, 177, 115, 54, 258)) kra022_remove &lt;- as.character(c(5, 31, 161)) # kra003_subclone&lt;- as.character(c(372, 173, 274, 108, 39, 289)) kra023_remove &lt;- as.character(c(96, 199, 246, 135, 104, 5)) # kra004_subclone&lt;- as.character(c(92, 102, 252, 181, # 264, 258, 290, 268) kra024_remove &lt;- as.character(c(193, 344, 337, 356, 85,86,309,52, 188,374, 176,53, 87,169,36,115, 45,281,66)) # kra005_subclone &lt;- as.character(c(297, 92, 113, 103, # 152, 48, 333)) kra025_remove &lt;- as.character(c(141, 257,85,183,127)) # kra006_subclone &lt;- as.character(c(380)) kra026_remove &lt;- as.character(c(318, 287, 260, 208, 247, 75, 285, 376, 238, 200, 215, 362, 49)) # kra007_subclone &lt;- as.character(c(318, 292, 381, 319, # 198, 208, 351, 353, # 285, 379)) kra027_remove &lt;- as.character(c(339, 375, 141, 126, 346, 204, 69, 343, 377, 364, 298, 79)) # kra008_subclone &lt;- as.character(c(69, 87, 60, 61, # 143, 35, 241, 202)) kra028_remove &lt;- as.character(c(37, 178, 167, 225, 125, 90, 249, 50,66, 327 )) # kra009_subclone1 &lt;- as.character(c(375)) kra029_remove &lt;- as.character(c(14, 277, 353, 203, 137 )) kra030_remove &lt;- as.character(c(341, 177, 111, 157, 226, 209, 150, 301, 158, 121, 273, 190, 47, 18 )) kra031_remove &lt;- as.character(c(159, 217, 261, 122, 60, 201, 153)) kra032_remove &lt;- as.character(c(349, 347, 58, 370, 284, 366, 326, 373, 306, 27, 138, 113, 348, 22, 24, 103, 218, 181)) # kra010 has three subclones!! # kra010_subclone1 &lt;- as.character(c(355,34,166,139, # 19, 213, 357, 57, # 72)) # kra010_subclone2 &lt;- 317 t/m 304 # kra010_subclone2 &lt; 235 t/m 176 ########## # Remove # ########## kra003 &lt;- remove_selection(select_files_edivisive$kra003, kra003_remove) kra004 &lt;- remove_selection(select_files_edivisive$kra004, kra004_remove) kra005 &lt;- remove_selection(select_files_edivisive$kra005, kra005_remove) kra006 &lt;- remove_selection(select_files_edivisive$kra006, kra006_remove) kra007 &lt;- remove_selection(select_files_edivisive$kra007, kra007_remove) kra008 &lt;- remove_selection(select_files_edivisive$kra008, kra008_remove) kra009 &lt;- remove_selection(select_files_edivisive$kra009, kra009_remove) kra010 &lt;- remove_selection(select_files_edivisive$kra010, kra010_remove) kra022 &lt;- remove_selection(select_files_edivisive$kra022, kra022_remove) kra023 &lt;- remove_selection(select_files_edivisive$kra023, kra023_remove) kra024 &lt;- remove_selection(select_files_edivisive$kra024, kra024_remove) kra025 &lt;- remove_selection(select_files_edivisive$kra025, kra025_remove) kra026 &lt;- remove_selection(select_files_edivisive$kra026, kra026_remove) kra027 &lt;- remove_selection(select_files_edivisive$kra027, kra027_remove) kra028 &lt;- remove_selection(select_files_edivisive$kra028, kra028_remove) kra029 &lt;- remove_selection(select_files_edivisive$kra029, kra029_remove) kra030 &lt;- remove_selection(select_files_edivisive$kra030, kra030_remove) kra031 &lt;- remove_selection(select_files_edivisive$kra031, kra031_remove) kra032 &lt;- remove_selection(select_files_edivisive$kra032, kra032_remove) man_select_files_edivisive &lt;- list(kra003 = kra003, kra004 = kra004, kra005 = kra005, kra006 = kra006, kra007 = kra007, kra008 = kra008, kra009 = kra009, kra010 = kra010, kra022 = kra022, kra023 = kra023, kra024 = kra024, kra025 = kra025, kra026 = kra026, kra027 = kra027, kra028 = kra028, kra029 = kra029, kra030 = kra030, kra031 = kra031, kra032 = kra032 ) ######## # Save # ######## save(man_select_files_edivisive, file = &#39;../cna_analysis/rda/subclonal_dynamics/man_select_files_edivisive.rda&#39; ) 2.3 Summary statistics of copy number alterations ######## # Data # ######## load(&#39;../cna_analysis/rda/subclonal_dynamics/man_select_files_edivisive.rda&#39; ) ########### # Wrangle # ########### # removing HUB181I kra024 en kra025 man_select_files_edivisive &lt;- man_select_files_edivisive[!names(man_select_files_edivisive) %in% c(&#39;kra024&#39;, &#39;kra025&#39;)] # !!! GITHUB SPECIFIC CODE !!! # # adding &#39;../cna_analysis/&#39; to each path within man_select_files_edivisive man_select_files_edivisive &lt;- lapply(man_select_files_edivisive, function(x) paste0(&quot;../cna_analysis/&quot;, x)) ####### # Run # ####### # loading segment data from files files_loaded &lt;- loadFromFiles(unlist(man_select_files_edivisive), check.class=c(&#39;GRanges&#39;, &#39;GRangesList&#39;, &#39;aneuHMM&#39;, &#39;aneuBiHMM&#39;)) # Computing the total number of cells sequenced length(files_loaded) ## [1] 2944 # computing the total sum of unique CNAs per single cell and store in a vector cna_vector &lt;- sapply(files_loaded, function(file) { seg_grange &lt;- file$segments cnas_grange &lt;- seg_grange[seg_grange$copy.number != 2,] return(length(cnas_grange)) }) # Computing the mean CNA per single cell mean(cna_vector) ## [1] 26.98709 # Computing the standard deviation of CNAs per single cell. sd(cna_vector) ## [1] 11.74091 2.4 PCA and K-means plots ######## # Plot # ######## # HUB183 # ###################################################################### # PCA # hub183_pca &lt;- draw_pca( man_select_files_edivisive$kra003, man_select_files_edivisive$kra004, size = 1, legend_position = c(0.65, 0.8) ) hub183_pca # K-means # hub183_kmeans &lt;- k_cluster( man_select_files_edivisive$kra003, man_select_files_edivisive$kra004, cluster = 1, cols = c(&quot;#C6CDF7&quot;), labels = c(&#39;A&#39;), legend_position = c(0.8, 0.85), normalize = T, return_elbow = F ) hub183_kmeans # HUB005 # ###################################################################### # PCA # hub005_pca &lt;- draw_pca( man_select_files_edivisive$kra005, man_select_files_edivisive$kra006, size = 1, legend_position = c(0.65, 0.85) ) hub005_pca # K-means # hub005_kmeans &lt;- k_cluster( man_select_files_edivisive$kra005, man_select_files_edivisive$kra006, cluster = 3, cols = c(&#39;#809aa6&#39;, # greyblue &quot;#D69C4E&quot;, # brown, &quot;#046C9A&quot;), #darkblue labels = c(&#39;A.b&#39;, &#39;B&#39;, &#39;A.a&#39;), legend_position = c(0.8, 0.85), normalize = T, return_elbow = F ) hub005_kmeans # HUB106 # ###################################################################### # PCA # hub106_pca &lt;- draw_pca( man_select_files_edivisive$kra007, man_select_files_edivisive$kra008, size = 1, legend_position = c(0.65, 0.95) ) hub106_pca # K-means # hub106_kmeans &lt;- k_cluster( man_select_files_edivisive$kra007, man_select_files_edivisive$kra008, cluster = 3, cols = c(&quot;#E6A0C4&quot;, # pink &quot;#D8A499&quot;, #brownpink &quot;#7294D4&quot;), # blue labels = c(&#39;A&#39;, &#39;C&#39;, &#39;B&#39;), legend_position = c(0.8, 0.85), normalize = T, return_elbow = F ) hub106_kmeans # HUB062 # ###################################################################### ### Biological replicate 1 ### # PCA # hub062_pca_double &lt;- draw_pca_double( man_select_files_edivisive$kra009, man_select_files_edivisive$kra010, man_select_files_edivisive$kra030, size = 1, legend_position = c(0.05, 0.2) ) hub062_pca_double # &#39;zoom&#39; hub062_pca_double_zoom &lt;- draw_pca_double( man_select_files_edivisive$kra009, man_select_files_edivisive$kra010, man_select_files_edivisive$kra030, size = 15, legend_position = c(-0.05, 0.25) ) + coord_cartesian(xlim = c(-0.016, 0.030), ylim = c(0, 0.06)) + theme( axis.line = element_blank(), axis.text.x = element_blank(), axis.text.y = element_blank(), axis.ticks = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), legend.position = &quot;none&quot;, panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), plot.background = element_blank() ) hub062_pca_double_zoom # K-means # hub062_kmeans_double &lt;- k_cluster_double( man_select_files_edivisive$kra009, man_select_files_edivisive$kra010, man_select_files_edivisive$kra030, cluster = 3, cols = c(&quot;#F1BB7B&quot;, #orange like &quot;#FD6467&quot;, # pinkish red &quot;#5B1A18&quot;), #brownish labels = c(&#39;C&#39;, &#39;A&#39;, &#39;B&#39;), legend_position = c(0.05, 0.2), normalize = T, return_elbow = F ) hub062_kmeans_double ### Biological replicate 2 ### # PCA # hub062_pca_rep2 &lt;- draw_pca( man_select_files_edivisive$kra028, man_select_files_edivisive$kra032, size = 1, legend_position = c(0.05, 0.9) ) hub062_pca_rep2 # K-means # hub062_kmeans_rep2 &lt;- k_cluster( man_select_files_edivisive$kra028, man_select_files_edivisive$kra032, cluster = 3, cols = c(&quot;#FD6467&quot;, # pinkish red &quot;#5B1A18&quot;, #brownish &quot;#F1BB7B&quot;), #orange like labels = c(&#39;A&#39;, &#39;B&#39;, &#39;C&#39;), legend_position = c(0.05, 0.9), normalize = T ) hub062_kmeans_rep2 # HUB015 # ###################################################################### # PCA # hub015_pca &lt;- draw_pca( man_select_files_edivisive$kra022, # 10 gy radiated man_select_files_edivisive$kra023, # 0 gy control size = 1, legend_position = c(0.05, 0.8), ssdna004 = T ) # coordinates do not correspond with coordinates in pc1 and pc2! hub015_pca # K-means # hub015_kmeans &lt;- k_cluster( man_select_files_edivisive$kra022, man_select_files_edivisive$kra023, cluster = 3, cols = c(&quot;#f5de90&quot;, &#39;#E1AF00&#39;, &#39;#F21A00&#39;), # red labels = c( &#39;A.a&#39;,&#39;A.b&#39;, &#39;B&#39;), legend_position = c(0.05, 0.8), normalize = T, return_elbow = F ) hub015_kmeans # HUB197 # ###################################################################### # PCA # hub197_pca &lt;- draw_pca( man_select_files_edivisive$kra026, # 10 gy man_select_files_edivisive$kra027, # 0 gy # 0 Gy size = 1, legend_position = c(0.7, 0.8), ssdna004 = T ) hub197_pca # K-means # hub197_kmeans &lt;- k_cluster( man_select_files_edivisive$kra026, man_select_files_edivisive$kra027, cluster = 3, cols = c(&quot;#0B775E&quot;, &#39;#E1BD6D&#39;, &#39;#35274A&#39; ), labels = c(&#39;C&#39;, &#39;B&#39;, &#39;A&#39;), legend_position = c(0.7, 0.8), normalize = T ) hub197_kmeans ####### # END # ####### "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
