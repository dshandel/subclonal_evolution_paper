[["copy-number-pattern-analyses.html", "5 Copy number pattern analyses 5.1 Single cell analyses 5.2 CCLE analysis", " 5 Copy number pattern analyses # Libraries and sources library(stringr) library(tidyverse) library(cowplot) library(ggpubr) library(ggbeeswarm) library(nord) library(readxl) library(AneuFinder) source(&#39;R/cin_signature_ccle.R&#39;) source(&#39;R/cna_profiler.R&#39;) source(&#39;../cna_analysis/R/calculate_heterogeneity_score.R&#39;) source(&#39;../cna_analysis/R/shifters.R&#39;) 5.1 Single cell analyses 5.1.1 Heterogeneity score ####### # Run # ####### # create_cn_matrix cannot run when a subclone exist of just 1 clone i &lt;- which(sapply(subclone_list, length) &gt; 1) subclone_list &lt;- subclone_list[i] subclone_cn_matrix &lt;- sapply(subclone_list, create_cn_matrix) ######## # Data # ######## load(&#39;../cna_analysis/rda/cin_analysis/subclone_cn_matrices.rda&#39;) ####### # Run # ####### clust_and_shift_subclones &lt;- sapply(subclone_cn_matrix, cluster_and_shift_transitions, max_dist = 5000000) ######## # Data # ######## load(&#39;../cna_analysis/rda/cin_analysis/clust_and_shift_subclones.rda&#39;) load(&#39;../cna_analysis/rda/subclonal_dynamics/subclone_list.rda&#39;) ########### # Wrangle # ########### # !!! GITHUB SPECIFIC CODE !!! # # adding &#39;../cna_analysis/&#39; to each path within man_select_files_edivisive subclone_list &lt;- lapply(subclone_list, function(x) paste0(&quot;../cna_analysis/&quot;, x)) # removing clones with size 1 or less i &lt;- which(sapply(subclone_list, length) &gt; 1) # adding subclone size to the dataframe subclone_list &lt;- subclone_list[i] ####### # Run # ####### hetscore &lt;- lapply(clust_and_shift_subclones[1,], FUN = calculate_heterogeneity_score, min_num = 1) ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ## Start | calculate_heterogeneity_score ## End | calculate_heterogeneity_score ########### # Wrangle # ########### list_of_dataframes &lt;- lapply(hetscore, function(list_of_hetscores) { return(list_of_hetscores$genomewide) }) # bind them into one df aneu_het_score &lt;- bind_rows(list_of_dataframes) # add subclone full name aneu_het_score$full_id &lt;- colnames(clust_and_shift_subclones) # include only those organoids that we are interested in for this analysis aneu_het_score &lt;- aneu_het_score[!grepl(pattern = &#39;biological|c2&#39;, aneu_het_score$full_id ),] # add organoids id aneu_het_score$cline &lt;- str_extract(pattern = &#39;hub\\\\d{3}&#39;, aneu_het_score$full_id ) # add radiation status aneu_het_score$rad &lt;- str_extract(pattern = &#39;prerad|postrad&#39;, aneu_het_score$full_id) # add subclone_id aneu_het_score$subclone &lt;- str_extract(aneu_het_score$full_id, &quot;_(.*)&quot;) aneu_het_score$subclone &lt;- str_replace(aneu_het_score$full_id, pattern = &#39;_prerad_|_postrad_&#39;, replacement = &#39;&#39;) # ####### # # Run # # ####### # # adding aneuploidy scores # kars &lt;- sapply(subclone_list[aneu_het_score$full_id], karyotypeMeasures) # # ########### # # Wrangle # # ########### # ## Print the scores in one data.frame # kars_list &lt;- list() # for (i in 1:dim(kars)[2]) { # kars_list[[colnames(kars)[i]]] &lt;- kars[1,i] # } # # kars_df &lt;- data.frame(value = unlist(kars_list)) # # # every uneven row is aneuploidy # i_uneven &lt;- seq_len(nrow(kars_df)) %% 2 # Create row indicator # kars_df &lt;- kars_df[i_uneven == 1, ] # # # binding heterogeneity score dataframe and kars_df together # aneu_het_score$aneuploidy &lt;- kars_df # # rename full_id -&gt; unique_id aneu_het_score &lt;- aneu_het_score %&gt;% rename(&quot;full_id&quot; = &quot;unique_id&quot; ) ################ ### BASELINE ### ################ ########### # Wrangle # ########### res_df &lt;- subset(aneu_het_score, unique_id %in% aneu_het_score$unique_id[c( grep(&#39;hub005&#39;, aneu_het_score$unique_id), grep(&#39;hub183&#39;, aneu_het_score$unique_id), grep(&#39;hub015&#39;, aneu_het_score$unique_id), grep(&#39;hub062_prerad_a&#39;, aneu_het_score$unique_id), grep(&#39;hub197_prerad_a&#39;, aneu_het_score$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Resistant&#39;) sens_df &lt;- subset(aneu_het_score, unique_id %in% aneu_het_score$unique_id[c( grep(&#39;hub106&#39;, aneu_het_score$unique_id), grep(&#39;hub197&#39;, aneu_het_score$unique_id), grep(&#39;hub062_prerad_b&#39;, aneu_het_score$unique_id), grep(&#39;hub062_postrad_b&#39;, aneu_het_score$unique_id), grep(&#39;hub062_prerad_c&#39;, aneu_het_score$unique_id), grep(&#39;hub062_postrad_c&#39;, aneu_het_score$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Sensitive&#39;) %&gt;% filter(unique_id != &#39;hub197_prerad_a&#39;) df &lt;- rbind(res_df, sens_df) # remove postrad except df &lt;- df %&gt;% filter(rad != &#39;postrad&#39;) %&gt;% rbind(df %&gt;% filter(unique_id == &#39;hub062_postrad_a&#39;)) ################# # Heterogeneity # ################# # Statistics # ############## mwu_het &lt;- compare_means( Heterogeneity_2 ~ resistancy_group, data = df, method = &quot;t.test&quot;, paired = F ) # make y positon empty vector, and convert p to scientific notation with 1 decimal het_y &lt;- 0.7 mwu_het &lt;- mwu_het %&gt;% mutate(y.position = c(het_y), empty = &#39; &#39;) %&gt;% mutate(p = format(p, digits = 2)) %&gt;% mutate(p = as.numeric(p)) %&gt;% mutate(p = format(p, scientific = T)) %&gt;% mutate(p = sub(&quot;e&quot;, &quot;%.% 10^&quot;, p)) # Plot # ######## ggplot(data = df, aes(x = as.factor(resistancy_group), y = Heterogeneity_2)) + theme_cowplot() + geom_boxplot(aes(fill = resistancy_group), outlier.shape = NA) + scale_fill_manual(values = c(Resistant = &#39;#DE3163&#39;, Sensitive = &#39;#5090CD&#39;)) + xlab(&#39;&#39;) + ylab(&#39;Heterogeneity&#39;) + stat_pvalue_manual(mwu_het, label = &#39;empty&#39;) + annotate( &#39;text&#39;, x = 1.5, y = het_y * 1.0571, label = paste0(&quot;italic(P)==&quot;, mwu_het$p), parse = T ) + theme( axis.text.x = element_text(angle = 45, hjust=1), legend.position = &quot;none&quot;, aspect.ratio = 5 / 1.5) ### MEDICC2 intraclone variability ######## # Data # ######## load(&#39;../cna_analysis/rda/cin_analysis/aneu_het_score.rda&#39;) ################ ### BASELINE ### ################ ########### # Wrangle # ########### res_df &lt;- subset(aneu_het_score, unique_id %in% aneu_het_score$unique_id[c( grep(&#39;hub005&#39;, aneu_het_score$unique_id), grep(&#39;hub183&#39;, aneu_het_score$unique_id), grep(&#39;hub015&#39;, aneu_het_score$unique_id), grep(&#39;hub062_prerad_a&#39;, aneu_het_score$unique_id), grep(&#39;hub197_prerad_a&#39;, aneu_het_score$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Resistant&#39;) sens_df &lt;- subset(aneu_het_score, unique_id %in% aneu_het_score$unique_id[c( grep(&#39;hub106&#39;, aneu_het_score$unique_id), grep(&#39;hub197&#39;, aneu_het_score$unique_id), grep(&#39;hub062_prerad_b&#39;, aneu_het_score$unique_id), grep(&#39;hub062_postrad_b&#39;, aneu_het_score$unique_id), grep(&#39;hub062_prerad_c&#39;, aneu_het_score$unique_id), grep(&#39;hub062_postrad_c&#39;, aneu_het_score$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Sensitive&#39;) %&gt;% filter(unique_id != &#39;hub197_prerad_a&#39;) df &lt;- rbind(res_df, sens_df) # remove postrad except df &lt;- df %&gt;% filter(rad != &#39;postrad&#39;) %&gt;% rbind(df %&gt;% filter(unique_id == &#39;hub062_postrad_a&#39;)) # make sure to have the same subclones to work with unique(df$unique_id) ## [1] &quot;hub183_prerad_a&quot; &quot;hub005_prerad_a.a&quot; &quot;hub005_prerad_a.b&quot; ## [4] &quot;hub005_prerad_b&quot; &quot;hub062_prerad_a&quot; &quot;hub015_prerad_a.a&quot; ## [7] &quot;hub197_prerad_a&quot; &quot;hub106_prerad_a&quot; &quot;hub106_prerad_b&quot; ## [10] &quot;hub106_prerad_c&quot; &quot;hub062_prerad_b&quot; &quot;hub062_prerad_c&quot; ## [13] &quot;hub197_prerad_b&quot; &quot;hub197_prerad_c&quot; ######## # Data # ######## load(&#39;../cna_analysis/rda/subclonal_dynamics/subclone_list.rda&#39;) ############ # Function # ############ pairwise_mean_subclone &lt;- function(pair_dist_df, list_of_subclone) { samples &lt;- str_match(list_of_subclone, &quot;single.SCC-scKaryo-UMC-\\\\s*(.*?)\\\\s*.bam&quot;)[,2] df_subset_row &lt;- subset(pair_dist_df, sample_id %in% samples) df_subset_row_col &lt;- df_subset_row[, samples] df_mat &lt;- as.matrix(df_subset_row_col) return(mean(df_mat)) } pairwise_mean_subclone_ssdna004 &lt;- function(pair_dist_df, list_of_subclone) { samples &lt;- str_match(list_of_subclone, &quot;method-edivisive/\\\\s*(.*?)\\\\s*.bam&quot;)[,2] df_subset_row &lt;- subset(pair_dist_df, sample_id %in% samples) df_subset_row_col &lt;- df_subset_row[, samples] df_mat &lt;- as.matrix(df_subset_row_col) return(mean(df_mat)) } ######## # Runs # ######## hub183 &lt;- read_delim(&quot;../cna_analysis/rda/medicc2/hub183/hub183_pairwise_distances.tsv&quot;, delim = &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) hub183_prerad_a &lt;- pairwise_mean_subclone(hub183, subclone_list$hub183_prerad_a) hub005 &lt;- read_delim(&quot;../cna_analysis/rda/medicc2/hub005/hub005_pairwise_distances.tsv&quot;, delim = &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) hub005_prerad_a.a &lt;- pairwise_mean_subclone(hub005, subclone_list$hub005_prerad_a.a) hub005_prerad_a.b &lt;- pairwise_mean_subclone(hub005, subclone_list$hub005_prerad_a.b) hub005_prerad_b &lt;- pairwise_mean_subclone(hub005, subclone_list$hub005_prerad_b) hub062 &lt;- read_delim(&quot;../cna_analysis/rda/medicc2/hub062/hub062_pairwise_distances.tsv&quot;, delim = &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) hub062_prerad_a &lt;- pairwise_mean_subclone(hub062, subclone_list$hub062_prerad_a) hub062_prerad_b &lt;- pairwise_mean_subclone(hub062, subclone_list$hub062_prerad_b) hub062_prerad_c &lt;- pairwise_mean_subclone(hub062, subclone_list$hub062_prerad_c) hub015 &lt;- read_delim(&quot;../cna_analysis/rda/medicc2/hub015/hub015_pairwise_distances.tsv&quot;, delim = &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) # thsi is actually a.b but it is called wrong in dataframe df, they correspond to the same # clone though. hub015_prerad_a.a &lt;- pairwise_mean_subclone_ssdna004(hub015, subclone_list$hub015_prerad_a.b ) hub106 &lt;- read_delim(&quot;../cna_analysis/rda/medicc2/hub106/hub106_pairwise_distances.tsv&quot;, delim = &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) hub106_prerad_a &lt;- pairwise_mean_subclone(hub106, subclone_list$hub106_prerad_a) hub106_prerad_b &lt;- pairwise_mean_subclone(hub106, subclone_list$hub106_prerad_b) hub106_prerad_c &lt;- pairwise_mean_subclone(hub106, subclone_list$hub106_prerad_c) hub197 &lt;- read_delim(&quot;../cna_analysis/rda/medicc2/hub197/hub197_pairwise_distances.tsv&quot;, delim = &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) hub197_prerad_a &lt;- pairwise_mean_subclone_ssdna004(hub197, subclone_list$hub197_prerad_a) hub197_prerad_b &lt;- pairwise_mean_subclone_ssdna004(hub197, subclone_list$hub197_prerad_b) hub197_prerad_c &lt;- pairwise_mean_subclone_ssdna004(hub197, subclone_list$hub197_prerad_c) ### dataframe df_pwd &lt;- data.frame(unique_id = c(&#39;hub183_prerad_a&#39;, &#39;hub005_prerad_a.a&#39;, &#39;hub005_prerad_a.b&#39;, &#39;hub005_prerad_b&#39;, &#39;hub062_prerad_a&#39;, &#39;hub062_prerad_b&#39;, &#39;hub062_prerad_c&#39;, &#39;hub015_prerad_a.a&#39;, &#39;hub106_prerad_a&#39;, &#39;hub106_prerad_b&#39;, &#39;hub106_prerad_c&#39;, &#39;hub197_prerad_a&#39;, &#39;hub197_prerad_b&#39;, &#39;hub197_prerad_c&#39;), pwd_mean = c(hub183_prerad_a, hub005_prerad_a.a, hub005_prerad_a.b, hub005_prerad_b, hub062_prerad_a, hub062_prerad_b, hub062_prerad_c, hub015_prerad_a.a, hub106_prerad_a, hub106_prerad_b, hub106_prerad_c, hub197_prerad_a, hub197_prerad_b, hub197_prerad_c)) df &lt;- left_join(df, df_pwd) plot(df$pwd_mean, df$Heterogeneity_2) # Statistics # ############## mwu_het &lt;- compare_means( pwd_mean ~ resistancy_group, data = df, method = &quot;t.test&quot;, paired = F ) # make y positon empty vector, and convert p to scientific notation with 1 decimal het_y &lt;- 80 mwu_het &lt;- mwu_het %&gt;% mutate(y.position = c(het_y), empty = &#39; &#39;) %&gt;% mutate(p = format(p, digits = 2)) %&gt;% mutate(p = as.numeric(p)) %&gt;% mutate(p = format(p, scientific = T)) %&gt;% mutate(p = sub(&quot;e&quot;, &quot;%.% 10^&quot;, p)) ggplot(data = df, aes(x = as.factor(resistancy_group), y = pwd_mean)) + theme_cowplot() + geom_boxplot(aes(fill = resistancy_group), outlier.shape = NA) + scale_fill_manual(values = c(Resistant = &#39;#DE3163&#39;, Sensitive = &#39;#5090CD&#39;)) + xlab(&#39;&#39;) + ylab(&#39;Intraclone variability (MEDICC2)&#39;) + stat_pvalue_manual(mwu_het, label = &#39;empty&#39;) + annotate( &#39;text&#39;, x = 1.5, y = het_y + 3, label = paste0(&quot;italic(P)==&quot;, mwu_het$p), parse = T ) + theme( axis.text.x = element_text(angle = 45, hjust=1), legend.position = &quot;none&quot;, aspect.ratio = 5 / 1.5) 5.1.2 Copy number length analysis ######## # Data # ######## load(&#39;../cna_analysis/rda/cin_analysis/subclone_cn_matrices.rda&#39;) ####### # Run # ####### cna_profile_per_subclone_output &lt;- lapply(subclone_cn_matrix, cna_profiler) ########### # Wrangle # ########### # binding togehter cna_df &lt;- bind_rows(cna_profile_per_subclone_output, .id = &quot;unique_id&quot;) # add radiation status cna_df$rad &lt;- str_extract(pattern = &#39;prerad|postrad&#39;, cna_df$unique_id) ######## # Data # ######## load(&#39;../cna_analysis/rda/cin_analysis/cna_profiles.rda&#39;) ################ ### BASELINE ### ################ ########### # Wrangle # ########### # include only those organoids that we are interested in for this analysis cna_df &lt;- cna_df[!grepl(pattern = &#39;biological|c2&#39;, cna_df$unique_id ),] res_df &lt;- subset(cna_df, unique_id %in% cna_df$unique_id[c( grep(&#39;hub005&#39;, cna_df$unique_id), grep(&#39;hub183&#39;, cna_df$unique_id), grep(&#39;hub015&#39;, cna_df$unique_id), grep(&#39;hub062_prerad_a&#39;, cna_df$unique_id), grep(&#39;hub197_prerad_a&#39;, cna_df$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Resistant&#39;) sens_df &lt;- subset(cna_df, unique_id %in% cna_df$unique_id[c( grep(&#39;hub106&#39;, cna_df$unique_id), grep(&#39;hub197&#39;, cna_df$unique_id), grep(&#39;hub062_prerad_b&#39;, cna_df$unique_id), grep(&#39;hub062_postrad_b&#39;, cna_df$unique_id), grep(&#39;hub062_prerad_c&#39;, cna_df$unique_id), grep(&#39;hub062_postrad_c&#39;, cna_df$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Sensitive&#39;) %&gt;% filter(unique_id != &#39;hub197_prerad_a&#39;) df &lt;- rbind(res_df, sens_df) # remove postrad df &lt;- df %&gt;% filter(rad != &#39;postrad&#39;) %&gt;% rbind(df %&gt;% filter(unique_id == &#39;hub062_postrad_a&#39; )) # making bins df_scna &lt;- df %&gt;% mutate(scna = ifelse(fraction &lt; 0.3, &#39;fCNA&#39;, ifelse(fraction &gt; &#39;0.98&#39;, &#39;arm&#39;, &#39;lCNA&#39;))) %&gt;% group_by(cell_id, rad, resistancy_group) %&gt;% count(scna) ######## # Plot # ######## # Boxplot # ########### ### STATISTICS PER CELL ### stat &lt;- compare_means( n ~ resistancy_group, group.by = c(&#39;scna&#39;), data = df_scna, method = &quot;wilcox.test&quot;, paired = F ) y.post = c(40, 35, 30) stat &lt;- stat %&gt;% mutate(y.position = y.post, empty = &#39; &#39;) %&gt;% mutate(p = format(p, digits = 2)) %&gt;% mutate(p = as.numeric(p)) %&gt;% mutate(p = format(p, scientific = T)) %&gt;% mutate(p = sub(&quot;e&quot;, &quot;%.% 10^&quot;, p)) stat &lt;- within(stat, p[p.signif == &#39;ns&#39;] &lt;- &#39;ns&#39;) # Plot ggplot(df_scna, aes(x= as.factor(scna), y = n, group = interaction(scna, resistancy_group))) + geom_point(aes(alpha= 1, col = resistancy_group), position=position_jitterdodge(1, jitter.width = 0.1)) + guides(alpha = &#39;none&#39;) + scale_colour_manual(values=c(Resistant = &#39;#DE3163&#39;, Sensitive =&#39;#5090CD&#39;)) + geom_boxplot(outlier.shape = NA, aes(fill = resistancy_group)) + theme_cowplot() + scale_fill_manual(values=c(Resistant = &#39;#DE3163&#39;, Sensitive =&#39;#5090CD&#39;), guide = guide_legend(override.aes = list( linetype = c(rep(&quot;blank&quot;, length(unique(df_scna$resistancy_group)))), shape = c(rep(19, length(unique(df_scna$resistancy_group))))))) + # stat_summary(alpha = 0.8, fun.y=mean, position = position_dodge(0.75), geom=&quot;point&quot;, shape=18, size=2, color=&quot;#2E3440&quot;, fill=&quot;#2E3440&quot;) + labs(x=expression(atop(&quot; &quot;)), y=expression(atop(&quot;CNA count (per single cell)&quot;))) + theme(legend.title=element_blank(), aspect.ratio = 5/3, axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_discrete(limits = c(&#39;fCNA&#39;, &#39;lCNA&#39;, &#39;arm&#39;), labels=c(&quot;fCNA&quot; = &quot;focal CNA&quot;, &quot;lCNA&quot; = &quot;large CNA&quot;, &quot;arm&quot; = &quot;arm/chromosome CNA&quot;)) + # adding P value to fSCNA annotate(linewidth = 0.25,&quot;segment&quot;, x = 0.8125, xend = 1.1875, y = y.post[1], yend = y.post[1]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 0.8125, xend = 0.8125, y = y.post[1], yend = y.post[1]-1.05) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.1875, xend = 1.1875, y = y.post[1], yend = y.post[1]-1.05) + annotate( &#39;text&#39;, x = 1.3, y = y.post[1] +2.284, label = paste0(&quot;italic(P)==&quot;, stat$p[2]), parse = T ) + # adding P value to lSCNA annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.8125, xend = 2.1875, y = y.post[2], yend = y.post[2]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.8125, xend = 1.8125, y = y.post[2], yend = (y.post[2]-1.05)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.1875, xend = 2.1875, y = y.post[2], yend = (y.post[2]-1.05)) + annotate( &#39;text&#39;, x = 2.2, y = y.post[2] + 2.284, label = paste0(&quot;italic(P)==&quot;, stat$p[3]), parse = T ) + # adding P value to arm annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.8125, xend = 3.1875, y = y.post[3], yend = y.post[3]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.8125, xend = 2.8125, y = y.post[3], yend = (y.post[3]-1.05)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 3.1875, xend = 3.1875, y = y.post[3], yend = (y.post[3]-1.05)) + annotate( &#39;text&#39;, x = 3.2, y = y.post[3] + 2.284, label = paste0(&quot;italic(P)==&quot;, stat$p[1]), parse = T ) + coord_cartesian(clip = &#39;off&#39;) # making sure the p values don&#39;t can&#39;t clipped when going out of the plot margin #################### ### RAD RESPONSE ### #################### res_df &lt;- subset(cna_df, unique_id %in% cna_df$unique_id[c( grep(&#39;hub005&#39;, cna_df$unique_id), grep(&#39;hub183&#39;, cna_df$unique_id), grep(&#39;hub015&#39;, cna_df$unique_id), grep(&#39;hub062_prerad_a&#39;, cna_df$unique_id), grep(&#39;hub062_postrad_a&#39;, cna_df$unique_id), grep(&#39;hub197_prerad_a&#39;, cna_df$unique_id), grep(&#39;hub197_postrad_a&#39;, cna_df$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Resistant&#39;) sens_df &lt;- subset(cna_df, unique_id %in% cna_df$unique_id[c( grep(&#39;hub106&#39;, cna_df$unique_id), grep(&#39;hub062_prerad_b&#39;, cna_df$unique_id), grep(&#39;hub062_postrad_b&#39;, cna_df$unique_id), grep(&#39;hub062_prerad_c&#39;, cna_df$unique_id), grep(&#39;hub062_postrad_c&#39;, cna_df$unique_id) )]) %&gt;% mutate(resistancy_group = &#39;Sensitive&#39;) df &lt;- rbind(res_df, sens_df) # making bins df_scna &lt;- df %&gt;% mutate(scna = ifelse(fraction &lt; 0.3, &#39;fCNA&#39;, ifelse(fraction &gt; &#39;0.98&#39;, &#39;arm&#39;, &#39;lCNA&#39;))) %&gt;% group_by(cell_id, rad, resistancy_group) %&gt;% count(scna) df_scna %&gt;% ungroup() %&gt;% group_by(scna, rad, resistancy_group) %&gt;% summarize(mean = mean(n), median = median(n)) ## # A tibble: 12 × 5 ## # Groups: scna, rad [6] ## scna rad resistancy_group mean median ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 arm postrad Resistant 9.42 9 ## 2 arm postrad Sensitive 15.9 17 ## 3 arm prerad Resistant 9.36 7 ## 4 arm prerad Sensitive 15.7 15 ## 5 fCNA postrad Resistant 6.86 6 ## 6 fCNA postrad Sensitive 10.0 9 ## 7 fCNA prerad Resistant 6.14 6 ## 8 fCNA prerad Sensitive 7.05 7 ## 9 lCNA postrad Resistant 6.93 7 ## 10 lCNA postrad Sensitive 11.6 11 ## 11 lCNA prerad Resistant 5.06 4 ## 12 lCNA prerad Sensitive 8.65 8 # changing levels df_scna$scna &lt;- factor(df_scna$scna,levels = c(&quot;fCNA&quot;, &quot;lCNA&quot;, &quot;arm&quot;)) df_scna$rad &lt;- factor(df_scna$rad , levels = c(&#39;prerad&#39;,&#39;postrad&#39;)) # Statistics # ############## stat &lt;- compare_means( data = df_scna, n ~ rad, group.by = c(&#39;scna&#39;, &#39;resistancy_group&#39;), method = &quot;wilcox.test&quot;, paired = F ) y.post = c(32, 32, 28, 32, 32, 36) stat &lt;- stat %&gt;% mutate(y.position = y.post, empty = &#39; &#39;) %&gt;% mutate(p = format(p, digits = 2)) %&gt;% mutate(p = as.numeric(p)) %&gt;% mutate(p = format(p, scientific = T)) %&gt;% mutate(p = sub(&quot;e&quot;, &quot;%.% 10^&quot;, p)) stat &lt;- within(stat, p[p.signif == &#39;ns&#39;] &lt;- &#39;ns&#39;) ### Resistant ### ggplot(subset(df_scna, resistancy_group == &#39;Resistant&#39;), aes(x= as.factor(scna), y = n, group = interaction(scna, rad))) + geom_jitter(aes(alpha= 0.8, col = rad), position=position_jitterdodge()) + guides(alpha = &#39;none&#39;, col = &#39;none&#39;) + scale_colour_manual(values=c(prerad = &quot;#999999&quot;, postrad =&quot;#E69F00&quot;)) + geom_boxplot(outlier.shape = NA, aes(fill = rad)) + stat_summary(alpha = 0.8, fun.y=mean, position = position_dodge(0.75), geom=&quot;point&quot;, shape=18, size=2, color=&quot;#2E3440&quot;, fill=&quot;#2E3440&quot;) + theme_cowplot() + scale_fill_manual(values=c(prerad = &quot;#999999&quot;, postrad =&quot;#E69F00&quot;), labels = c(prerad = &#39;Baseline&#39;, postrad = &#39;Recurrence&#39;), guide = guide_legend(override.aes = list( linetype = c(rep(&quot;blank&quot;, length(unique(df_scna$resistancy_group)))), shape = c(rep(19, length(unique(df_scna$resistancy_group))))))) + labs(x=expression(atop(&quot; &quot;)), y=expression(atop(&quot;SCNA count (per single cell)&quot;))) + theme(strip.background = element_rect( color=&quot;white&quot;, fill=&quot;white&quot;, linetype=&quot;solid&quot; ), legend.title=element_blank(), aspect.ratio = 5/3) + labs(title = &#39;Resistant&#39;) + theme(plot.title = element_text(hjust = 0.5, face = &#39;plain&#39;), legend.position = &quot;none&quot;, axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_discrete(limits = c(&#39;fCNA&#39;, &#39;lCNA&#39;, &#39;arm&#39;), labels=c(&quot;fCNA&quot; = &quot;focal CNA&quot;, &quot;lCNA&quot; = &quot;large CNA&quot;, &quot;arm&quot; = &quot;arm/chromosome CNA&quot;)) + # adding P value to fSCNA annotate(linewidth = 0.25,&quot;segment&quot;, x = 0.8125, xend = 1.1875, y = y.post[2], yend = y.post[2]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 0.8125, xend = 0.8125, y = y.post[2], yend = (y.post[2]-0.7)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.1875, xend = 1.1875, y = y.post[2], yend = (y.post[2]-0.7)) + annotate( &#39;text&#39;, x = 1.2, y = y.post[2] * 1.0571, label = paste0(&quot;italic(P)==&quot;, stat$p[2]), parse = T ) + # adding P value to lSCNA annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.8125, xend = 2.1875, y = y.post[3], yend = y.post[3]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.8125, xend = 1.8125, y = y.post[3], yend = (y.post[3]-0.7)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.1875, xend = 2.1875, y = y.post[3], yend = (y.post[3]-0.7)) + annotate( &#39;text&#39;, x = 2, y = y.post[3] * 1.0571, label = paste0(&quot;italic(P)==&quot;, stat$p[3]), parse = T ) + # adding P value to arm annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.8125, xend = 3.1875, y = y.post[1], yend = y.post[1]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.8125, xend = 2.8125, y = y.post[1], yend = (y.post[1]-0.7)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 3.1875, xend = 3.1875, y = y.post[1], yend = (y.post[1]-0.7)) + annotate( &#39;text&#39;, x = 3, y = y.post[1] * 1.0571, label = paste0(&quot;italic(P)==&quot;, stat$p[1]), parse = T ) + coord_cartesian(clip = &#39;off&#39;) ### Sensitive ### ggplot(subset(df_scna, resistancy_group == &#39;Sensitive&#39;), aes(x= as.factor(scna), y = n, group = interaction(scna, rad))) + geom_jitter(aes(alpha= 0.8, col = rad), position=position_jitterdodge()) + guides(alpha = &#39;none&#39;, col = &#39;none&#39;) + scale_colour_manual(values=c(prerad = &quot;#999999&quot;, postrad =&quot;#E69F00&quot;)) + geom_boxplot(outlier.shape = NA, aes(fill = rad)) + stat_summary(alpha = 0.8, fun.y=mean, position = position_dodge(0.75), geom=&quot;point&quot;, shape=18, size=2, color=&quot;#2E3440&quot;, fill=&quot;#2E3440&quot;) + theme_cowplot() + scale_fill_manual(values=c(prerad = &quot;#999999&quot;, postrad =&quot;#E69F00&quot;), labels = c(prerad = &#39;Baseline&#39;, postrad = &#39;Recurrence&#39;), guide = guide_legend(override.aes = list( linetype = c(rep(&quot;blank&quot;, length(unique(df_scna$resistancy_group)))), shape = c(rep(19, length(unique(df_scna$resistancy_group))))))) + labs(x=expression(atop(&quot; &quot;)), y=expression(atop(&quot;SCNA count (per single cell)&quot;))) + theme(legend.position = &quot;none&quot;, strip.background = element_rect( color=&quot;white&quot;, fill=&quot;white&quot;, linetype=&quot;solid&quot; ), legend.title=element_blank(), aspect.ratio = 5/3) + labs(title = &#39;Sensitive&#39;) + theme(plot.title = element_text(hjust = 0.5, face = &#39;plain&#39;),axis.text.x = element_text(angle = 45, hjust = 1)) + scale_x_discrete(limits = c(&#39;fCNA&#39;, &#39;lCNA&#39;, &#39;arm&#39;), labels=c(&quot;fCNA&quot; = &quot;focal CNA&quot;, &quot;lCNA&quot; = &quot;large CNA&quot;, &quot;arm&quot; = &quot;arm/chromosome CNA&quot;)) + # adding P value to fSCNA annotate(linewidth = 0.25,&quot;segment&quot;, x = 0.8125, xend = 1.1875, y = y.post[5], yend = y.post[5]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 0.8125, xend = 0.8125, y = y.post[5], yend = (y.post[5]-0.7)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.1875, xend = 1.1875, y = y.post[5], yend = (y.post[5]-0.7)) + annotate( &#39;text&#39;, x = 1.3, y = y.post[5] * 1.0571, label = paste0(&quot;italic(P)==&quot;, stat$p[5]), parse = T ) + # adding P value to lSCNA annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.8125, xend = 2.1875, y = y.post[6], yend = y.post[6]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1.8125, xend = 1.8125, y = y.post[6], yend = (y.post[6]-0.7)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.1875, xend = 2.1875, y = y.post[6], yend = (y.post[6]-0.7)) + annotate( &#39;text&#39;, x = 2.2, y = y.post[6] * 1.0571, label = paste0(&quot;italic(P)==&quot;, stat$p[6]), parse = T ) + # adding P value to arm annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.8125, xend = 3.1875, y = y.post[4], yend = y.post[4]) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2.8125, xend = 2.8125, y = y.post[4], yend = (y.post[4]-0.7)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 3.1875, xend = 3.1875, y = y.post[4], yend = (y.post[4]-0.7)) + annotate( &#39;text&#39;, x = 3.3, y = y.post[4] * 1.0571, label = paste0(&quot;italic(P)==&quot;, stat$p[4]), parse = T ) + coord_cartesian(clip = &#39;off&#39;) 5.2 CCLE analysis 5.2.1 Ploidy and whole genome duplication analysis # absolute calls df_absolute &lt;- read_excel(&quot;../cna_analysis/data/cna_analysis/CCLE_ABSOLUTE_combined_20181227.xlsx&quot;, sheet = &quot;ABSOLUTE_combined.table&quot;) # resistancy data load(&#39;../cna_analysis/rda/cna_analysis/ccle_rad_data.rda&#39;) ########### # PLOIDY # ########### # change column name depMapID in df_absolute to DepMap_ID so it matches the column # in rad_df names(df_absolute)[names(df_absolute) == &#39;depMapID&#39;] &lt;- &#39;DepMap_ID&#39; # bring two dataframes together comb_df &lt;- left_join(rad_df, df_absolute, by = &#39;DepMap_ID&#39;) # only resistant and sensitive groups comb_df &lt;- subset(comb_df, resistancy_group != &#39;Intermediate&#39;) # add a wgd_status column comb_df$wgd_status &lt;- ifelse(comb_df$Genome.doublings == 0, &#39;0&#39;, &#39;1&#39;) comb_df &lt;- comb_df[!is.na(comb_df$wgd_status),] comb_df &lt;- comb_df[!is.na(comb_df$primary_disease),] comb_df &lt;- comb_df[!is.na(comb_df$subtype_disease),] comb_df %&gt;% group_by(resistancy_group) %&gt;% summarize(mean_ploidy = mean(ploidy)) ## # A tibble: 2 × 2 ## resistancy_group mean_ploidy ## &lt;chr&gt; &lt;dbl&gt; ## 1 Resistant 2.71 ## 2 Sensitive 2.43 t &lt;- lm(as.numeric(comb_df$ploidy) ~ as.factor(comb_df$resistancy_group) + as.factor(comb_df$primary_disease) + as.factor(comb_df$subtype_disease)) t &lt;- summary(t) t_cof &lt;- t$coefficients # p value resistancy class t_cof[2,] ## Estimate Std. Error t value Pr(&gt;|t|) ## -0.2469465 0.1516792 -1.6280843 0.1057716 ####### # WGD # ####### tabol &lt;- table(comb_df$resistancy_group,comb_df$wgd_status) #radioresistant percentage with WGD tabol[1,2] / (tabol[1,1] + tabol[1,2])*100 ## [1] 64.7619 #radiosensitive percentage with WGD tabol[2,2] / (tabol[2,1] + tabol[2,2])*100 ## [1] 42.26804 # removing NAs comb_df &lt;- comb_df[!is.na(comb_df$wgd_status) | is.na(comb_df$primary_disease) | is.na(comb_df$subtype_disease),] t_wgd &lt;- glm(as.numeric(as.factor(comb_df$wgd_status)) ~ as.factor(comb_df$resistancy_group) + as.factor(comb_df$primary_disease) + as.factor(comb_df$subtype_disease)) t_wgd &lt;- summary(t_wgd) t_wgd_cof &lt;- t_wgd$coefficients # p value whole genome status. class t_wgd_cof[2,] ## Estimate Std. Error t value Pr(&gt;|t|) ## -0.08592444 0.08505858 -1.01017960 0.31416449 5.2.2 Run CIN signature ######## # Data # ######## # radiation data load(&#39;../cna_analysis/rda/cna_analysis/ccle_rad_data.rda&#39;) # metadata load(&#39;../cna_analysis/data/cna_analysis/22Q4_sample_info&#39;) # cnv data cnv_ccle &lt;- read.csv(&#39;../cna_analysis/data/cna_analysis/22Q4_CCLE_segment_cn.csv&#39;) ########### # Wrangle # ########### colnames(meta_df)[1] &lt;- &#39;DepMap_ID&#39; ####### # Run # ####### # run_cin_ccle for cells from which we have radiation sensitivity data cin_df &lt;- run_cin_ccle(cnv_ccle, rad_df) 5.2.3 Statistics CIN signature ############# # Statistics # ############## # Number of cell lines length(unique(cin_df$DepMap_ID)) ## [1] 529 # CX1 and CX7 are statistically different (including adjustment for primary disease and subtype). stat &lt;- bind_rows(lapply(unique(cin_df$cx_signature), function(cx_sig) { d &lt;- cin_df %&gt;% filter(resistancy_group %in% c(&#39;Resistant&#39;, &#39;Sensitive&#39;)) %&gt;% filter(cx_signature == cx_sig) # running lm so to control for primary_disease and subtype mean_cxscore_resistant &lt;- mean(subset(d, resistancy_group == &#39;Resistant&#39;)$cx_value) mean_cxscore_sensitive &lt;- mean(subset(d, resistancy_group == &#39;Sensitive&#39;)$cx_value) fc &lt;- mean_cxscore_resistant/mean_cxscore_sensitive lm_o &lt;- summary(lm(cx_value ~ resistancy_group + primary_disease + subtype_disease, data = d)) p_val &lt;- lm_o$coefficients[2,4] df &lt;- data.frame(cx_signature = cx_sig, mean_cxscore_resistant = mean_cxscore_resistant, mean_cxscore_sensitive = mean_cxscore_sensitive, fc = fc, p = p_val) return(df) }), .id = &quot;cx_signature&quot;) ########## # Excell # ########## # vector stating the cx_cause cx_cause &lt;- c( &#39;Chromosome missegregation via defective mitosis and/or telomere dysfunction&#39;, &#39;IHR&#39;, &#39;IHR with replication stress and impaired damage sensing&#39;, &#39;PI3K-AKT-mediated toleration of whole-genome duplication&#39;, &#39;IHR with replication stress&#39;, &#39;Chromosome missegragation via defective mitosis&#39;, &#39;Unkown&#39;, &#39;Replication stress&#39;, &#39;Replication stress&#39;, &#39;Impaired NHEJ with replication stress&#39;, &#39;Replication stress&#39;, &#39;Unknown&#39;, &#39;Replication stress&#39;, &#39;Chromosome missegregation via defective mitosis&#39;, &#39;Unknown&#39;, &#39;Unknown&#39;, &#39;Unknown&#39; ) stat$cx_cause &lt;- cx_cause # datatable showing p value of linear model adjusted for primary disease and subtype DT::datatable(stat) 5.2.4 Plot CX1 CIN signature stat &lt;- stat %&gt;% filter(p &lt; 0.05) %&gt;% mutate(p = format(p, digits = 2)) %&gt;% mutate(p = as.numeric(p)) %&gt;% mutate(p = format(p, scientific = T)) %&gt;% mutate(p = sub(&quot;e&quot;, &quot;%.% 10^&quot;, p)) # Function plot_ccle_cx &lt;- function(df, cx_sig, y.post, row) { #&#39; @param df is a dataframe #&#39; @param y.post where to put the p value label #&#39; @param cx_sig is the signature to output #&#39; @param which row in stat to take the p value from #&#39; @return a boxplot d &lt;- df %&gt;% filter(resistancy_group %in% c(&#39;Resistant&#39;, &#39;Sensitive&#39;)) %&gt;% filter(cx_signature == cx_sig) p &lt;- ggplot(data = d, aes(x = as.factor(resistancy_group), y = cx_value)) + geom_quasirandom(aes(alpha = 0.5, col = resistancy_group)) + guides(alpha = &#39;none&#39;) + geom_boxplot(outlier.shape = NA, aes(fill = resistancy_group)) + scale_colour_manual(values=c(Resistant = &#39;#DE3163&#39;, Sensitive =&#39;#5090CD&#39;)) + labs(x=expression(atop(&quot; &quot;)), y=expression(atop(&quot;CIN signature score&quot;,atop(&quot;CCLE cancer cell lines&quot;)))) + theme_cowplot() + scale_fill_manual(values=c(Resistant = &#39;#DE3163&#39;, Sensitive =&#39;#5090CD&#39;), guide = guide_legend(override.aes = list( linetype = c(rep(&quot;blank&quot;, length(unique( d$resistancy_group)))), shape = c(rep(19, length(unique( d$resistancy_group))))))) + theme(axis.text.x = element_text(angle = 45, hjust=1), legend.title=element_blank(), aspect.ratio = 5/1.5) + labs(title = cx_sig)+ theme(plot.title = element_text(hjust = 0.5, face = &#39;plain&#39;)) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1, xend = 2, y = y.post, yend = y.post) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 1, xend = 1, y = y.post, yend = y.post-max(d$cx_value)/20) + annotate(linewidth = 0.25,&quot;segment&quot;, x = 2, xend = 2, y = y.post, yend = y.post-max(d$cx_value)/20) + annotate( &#39;text&#39;, x = 1.5, y = y.post[1] + max(d$cx_value)/18, label = paste0(&quot;italic(P)==&quot;, stat$p[row]), parse = T ) p } ### CX1 ### plot_ccle_cx(cin_df, cx_sig = &#39;CX1&#39;, y.post = 0.9, row = 1) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
